using Microsoft.Azure.Functions.Worker;
using Microsoft.AspNetCore.Http;
using System.Net.Http.Json;
using Microsoft.Extensions.Logging;
using Nuget.Vulnerability.Analysis.Core.Inbound;
using Nuget.Vulnerability.Analysis.Core.Outbound;
using Nuget.Vulnerability.Analysis.Core.Clients;
using Microsoft.Azure.Functions.Worker.Http;
using System.Net;


namespace Nuget.Vulnerability.Analysis.FunctionApp.Functions
{
    public class AnalyzePackage
	{
		private readonly NugetResultsClient _nugetAnalysisService;
		private readonly ILogger<AnalyzePackage> _logger;

		public AnalyzePackage(NugetResultsClient nugetAnalysisService, ILogger<AnalyzePackage> logger)
		{
			_nugetAnalysisService = nugetAnalysisService;
			_logger = logger;
		}

		[Function("AnalyzePackage")]
		public async Task<HttpResponseData> Run([HttpTrigger(AuthorizationLevel.Function, "get", "post", Route = null)] HttpRequestData req, FunctionContext context)
		{
			_logger.LogInformation($"An HTTP {req.Method} request was triggered on {context.FunctionDefinition.Name}");

			AnalysisRequest? data = null;
			try
			{
				data = await req.ReadFromJsonAsync<AnalysisRequest>();
				if (data != null)
				{
					data.Validate();
					if (!data.IsValidRequest)
					{
						ApplicationException appEx = new ApplicationException("The request contained invalid assembly data.");
						throw appEx;
					}
				}
				else
				{
					ApplicationException appEx = new ApplicationException("The request assembly data was not valid/acceptable JSON.");
					throw appEx;
				}

			}
			catch(Exception ex)
			{
				_logger.LogError(ex, "The package details sent in the HTTP request body could not be used.");
				var response = req.CreateResponse(HttpStatusCode.InternalServerError);
				response.WriteString("The package details sent in the HTTP request body could not be used.");
				return response;
			}

			try
			{
				AnalysisResult? result = await _nugetAnalysisService.AnalyzeAssemblies(data);
				if (result != null)
				{
					var response = req.CreateResponse(HttpStatusCode.OK);
					await response.WriteAsJsonAsync<AnalysisResult>(result);
					return response;
				}
				else
				{
					return req.CreateResponse(HttpStatusCode.OK);
				}
			}
			catch (Exception ex)
			{
				_logger.LogError(ex, "The analysis results were not assembled for distribution.");
				var response = req.CreateResponse(HttpStatusCode.InternalServerError);
				response.WriteString(ex.Message);
				return response;
			}
		}
	}
}
