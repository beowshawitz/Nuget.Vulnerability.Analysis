using Microsoft.Azure.Functions.Worker;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;
using Nuget.Vulnerability.Analysis.Core.Clients;
using System.Configuration;
using System.Net.Mime;
using Microsoft.Extensions.Configuration;

var host = new HostBuilder()
    .ConfigureFunctionsWorkerDefaults()
	.ConfigureAppConfiguration((hostContext, builder) =>
	{
		builder.AddJsonFile("local.settings.json");
		builder.AddJsonFile(Path.Combine(hostContext.HostingEnvironment.ContentRootPath, $"local.settings.json"), optional: true, reloadOnChange: false);
		if (hostContext.HostingEnvironment.IsDevelopment())
		{
			builder.AddUserSecrets<Program>();
		}

	})
	.ConfigureServices((hostContext, services) => {
        services.AddApplicationInsightsTelemetryWorkerService();
        services.ConfigureFunctionsApplicationInsights();
        services.AddLogging();
		services.AddHttpClient<NugetResultsClient>(client =>
		{
			client.BaseAddress = new Uri(uriString: hostContext.Configuration.GetValue<string>("AnalysisApi:BaseAddress"));
		})
		.ConfigurePrimaryHttpMessageHandler(() =>
		{
			return new SocketsHttpHandler
			{
				PooledConnectionLifetime = TimeSpan.FromMinutes(5)
			};
		})
		.SetHandlerLifetime(Timeout.InfiniteTimeSpan);

	})
    .Build();

host.Run();
