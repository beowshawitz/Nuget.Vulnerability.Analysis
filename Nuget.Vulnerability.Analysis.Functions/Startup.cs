using Microsoft.Azure.Functions.Extensions.DependencyInjection;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Nuget.Vulnerability.Analysis.Core.Clients;
using System;
using System.IO;
using System.Net.Http;
using System.Net.Mime;
using System.Threading;

[assembly: FunctionsStartup(typeof(Nuget.Vulnerability.Analysis.FunctionApp.Startup))]

namespace Nuget.Vulnerability.Analysis.FunctionApp
{
	public class Startup : FunctionsStartup
	{
		public override void ConfigureAppConfiguration(IFunctionsConfigurationBuilder builder)
		{
			FunctionsHostBuilderContext context = builder.GetContext();
			builder.ConfigurationBuilder
				.AddJsonFile(Path.Combine(context.ApplicationRootPath, "appsettings.json"), optional: true, reloadOnChange: false)
				.AddJsonFile(Path.Combine(context.ApplicationRootPath, $"appsettings.{context.EnvironmentName}.json"), optional: true, reloadOnChange: false)
				.AddJsonFile(Path.Combine(context.ApplicationRootPath, $"local.settings.json"), optional: true, reloadOnChange: false)
				.AddEnvironmentVariables();

		}

		public override void Configure(IFunctionsHostBuilder builder)
		{
			builder.Services.AddLogging();
			var configuration = builder.GetContext().Configuration;
			builder.Services.AddHttpClient<NugetResultsClient>(client =>
			{
				client.BaseAddress = new Uri(configuration.GetValue<string>("AzServicesApi:BaseAddress"));
				client.DefaultRequestHeaders.Add("Accept", MediaTypeNames.Application.Json);
			})
			.ConfigurePrimaryHttpMessageHandler(() =>
			{
				return new SocketsHttpHandler
				{
					PooledConnectionLifetime = TimeSpan.FromMinutes(5)
				};
			})
			.SetHandlerLifetime(Timeout.InfiniteTimeSpan);
		}
	}
}
