using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using System.IO;
using Nuget.Vulnerability.Analysis.Core.Inbound;
using Nuget.Vulnerability.Analysis.Core.Outbound;
using Nuget.Vulnerability.Analysis.Core.Clients;

namespace Nuget.Vulnerability.Analysis.FunctionApp.Functions
{
    public class AnalyzePackage
	{
		private readonly NugetClient _nugetAnalysisService;

		public AnalyzePackage(NugetClient nugetAnalysisService)
		{
			_nugetAnalysisService = nugetAnalysisService;
		}

		[FunctionName("AnalyzePackage")]
		public async Task<IActionResult> Run([HttpTrigger(AuthorizationLevel.Function, "get", "post", Route = null)] HttpRequest req, ExecutionContext executionContext, ILogger log)
		{
			log.LogInformation($"An HTTP {req.Method} request was triggered on {executionContext.FunctionName}.");

			string requestBody = await new StreamReader(req.Body).ReadToEndAsync();
			AnalysisRequest data = null;
			try
			{
				data = JsonConvert.DeserializeObject<AnalysisRequest>(requestBody);
				if(data != null)
				{
					data.Validate();
					if (!data.IsValidRequest)
					{
						ApplicationException appEx = new ApplicationException("The request contained invalid assembly data.");
						throw appEx;
					}
				}
				else
				{
					ApplicationException appEx = new ApplicationException("The request assembly data was not valid/acceptable JSON.");
					throw appEx;
				}

			}
			catch(Exception ex)
			{
				log.LogError(ex, "The package details sent in the HTTP request body could not be used.");
				return new BadRequestObjectResult("The package details sent in the HTTP request body could not be used.");
			}

			try
			{
				AnalysisResult result = await _nugetAnalysisService.AnalyzeAssemblies(data);
				if (result != null)
				{
					return new OkObjectResult(JsonConvert.SerializeObject(result));
				}
				else
				{
					return new OkObjectResult(new EmptyResult());
				}
			}
			catch (Exception ex)
			{
				return new BadRequestObjectResult(ex);
			}
		}
	}
}
