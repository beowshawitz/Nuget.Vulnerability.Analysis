using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.Extensions.Logging.Abstractions;
using Newtonsoft.Json;
using Nuget.Vulnerability.Analysis.Core.Inbound;
using Nuget.Vulnerability.Analysis.Core.Outbound;
using Nuget.Vulnerability.Analysis.Core.Processing;
using Nuget.Vulnerability.Analysis.Core.Services;
using System;
using System.ComponentModel.DataAnnotations;
using System.Runtime.CompilerServices;

namespace Nuget.Vulnerability.Analysis.Web.Pages
{
	public class IndexModel : PageModel
	{
		private readonly ILogger<IndexModel> _logger;
		private readonly NugetService _nugetAnalysisService;

		public IndexModel(ILogger<IndexModel> logger, NugetService nugetAnalysisService)
		{
			_logger = logger;
			_nugetAnalysisService = nugetAnalysisService;
		}

		public string ErrorMessage { get; set; } = string.Empty;
		public bool HasErrors { get; set; } = false;
		public bool HasVulnerabilities { get; set; } = false;
		public bool ExecutedLookup { get; set; } = false;

		[BindProperty]
		public FormModel Form { get; set; } = default!;

		public SelectList PreviousSelections { get; set; } = null!;

		[BindProperty]
		public List<NugetAssembly> VulnerableAssemblies { get; set; } = null!;

		public IActionResult OnGet()
		{
			VulnerableAssemblies = new List<NugetAssembly>();
			ExecutedLookup = false;
			Form = new FormModel();
			return Page();
		}

		public async Task<IActionResult> OnPostAsync(FormModel Form)
		{
			try
			{
				AnalysisRequest? newRequest = GenerateRequestFromUserData(Form);
				if(newRequest == null)
				{
					ApplicationException appEx = new ApplicationException("Assembly data was missing from the submission. Please manually enter the assembly/version pairs or provide the pairs in the JSON formatted text.");
					throw appEx;
				}

				AnalysisResult? result = await _nugetAnalysisService.AnalyzeAssemblies(newRequest);
				if (result != null)
				{
					VulnerableAssemblies = result.VulnerableAssemblies;
				}
				ExecutedLookup = true;
			}
			catch (Exception ex)
			{
				_logger.LogError("An error occurred while requesting analysis.", ex);
				ErrorMessage = ex.Message;
			}
			HasVulnerabilities = VulnerableAssemblies.Any();
			HasErrors = string.IsNullOrEmpty(ErrorMessage);
			return Page();
		}

		private AnalysisRequest? GenerateRequestFromUserData(FormModel userData)
		{
			AnalysisRequest? analysisRequest = null;
			if(userData.AssemblyJson != null)
			{
				analysisRequest = JsonConvert.DeserializeObject<AnalysisRequest>(userData.AssemblyJson);
			}
			if(userData.AssemblySelectionList != null && userData.AssemblySelectionList.Any())
			{
				if(analysisRequest == null)
				{
					analysisRequest = new AnalysisRequest();
				}
				analysisRequest.Assemblies.AddRange(userData.AssemblySelectionList.Select(x => new AssemblyData(x)));
				var returnList = userData.AssemblySelectionList.Select(x => new AssemblyData(x));
				if(returnList.Any())
				{
					var options = new List<SelectListItem>();
					options.AddRange(returnList.Select(item => new SelectListItem { Value = $"{item.Name}|{item.Version}", Text = $"{item.Name} ({item.Version})", Selected = true }));
					PreviousSelections = new SelectList(options, "Value", "Text");
				}				
			}
			return analysisRequest;
		}
	}
	public class FormModel
	{
		[BindProperty]
		public string? ActiveTab { get; set; } = "manual";

		[BindProperty]
		[Display(Name = "Assembly (Json formatted)")]
		public string? AssemblyJson { get; set; } = string.Empty;

		[BindProperty]
		[Display(Name = "Assembly Selections")]
		public List<string>? AssemblySelectionList { get; set; }
	}
}