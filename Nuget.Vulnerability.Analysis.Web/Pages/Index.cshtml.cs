using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Newtonsoft.Json;
using Nuget.Vulnerability.Analysis.Core.Inbound;
using Nuget.Vulnerability.Analysis.Core.Outbound;
using Nuget.Vulnerability.Analysis.Core.Processing;
using Nuget.Vulnerability.Analysis.Core.Services;
using System.ComponentModel.DataAnnotations;

namespace Nuget.Vulnerability.Analysis.Web.Pages
{
	public class IndexModel : PageModel
	{
		private readonly ILogger<IndexModel> _logger;
		private readonly NugetService _nugetAnalysisService;

		public IndexModel(ILogger<IndexModel> logger, NugetService nugetAnalysisService)
		{
			_logger = logger;
			_nugetAnalysisService = nugetAnalysisService;
		}

		[BindProperty]
		[Required(ErrorMessage = "Assembly is required.")]
		[Display(Name = "Assembly (Json formatted)")]
		public string AssemblyJson { get; set; } = string.Empty;

		public string ErrorMessage { get; set; } = string.Empty;

		public bool HasErrors { get; set; } = false;

		public bool HasVulnerabilities { get; set; } = false;
		public bool ExecutedLookup { get; set; } = false;

		[BindProperty]
		public List<NugetAssembly> VulnerableAssemblies { get; set; } = null!;

		public IActionResult OnGet()
		{
			VulnerableAssemblies = new List<NugetAssembly>();
			ExecutedLookup = false;
			return Page();
		}

		public async Task<IActionResult> OnPostAsync()
		{
			if (!ModelState.IsValid)
			{
				return Page();
			}

			try
			{
				AnalysisRequest? newRequest = JsonConvert.DeserializeObject<AnalysisRequest>(AssemblyJson);
				if(newRequest == null)
				{
					ApplicationException appEx = new ApplicationException("The assembly data, which should be in JSON format, does not match the input required.");
					throw appEx;
				}
				AnalysisResult? result = await _nugetAnalysisService.AnalyzeAssemblies(newRequest);
				if (result != null)
				{
					VulnerableAssemblies = result.VulnerableAssemblies;
				}
				ExecutedLookup = true;
			}
			catch (Exception ex)
			{
				_logger.LogError("An error occurred while requesting analysis.", ex);
				ErrorMessage = ex.Message;
			}
			HasVulnerabilities = VulnerableAssemblies.Any();
			HasErrors = string.IsNullOrEmpty(ErrorMessage);
			return Page();
		}
	}
}