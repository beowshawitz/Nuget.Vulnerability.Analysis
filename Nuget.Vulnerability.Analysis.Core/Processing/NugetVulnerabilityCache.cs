using Microsoft.Extensions.Caching.Memory;
using Nuget.Vulnerability.Analysis.Core.Clients;
using Nuget.Vulnerability.Analysis.Core.Inbound;

namespace Nuget.Vulnerability.Analysis.Core.Processing
{
	public class NugetVulnerabilityCache
	{
		private const string cacheName = "NugetData";
		private readonly IMemoryCache _memoryCache;

		private Dictionary<string, List<NugetVulnerability>>? _vulnData;

		public NugetVulnerabilityCache(IMemoryCache memoryCache)
		{
			_memoryCache = memoryCache;
			_vulnData = new Dictionary<string, List<NugetVulnerability>>();
		}

		public async Task<bool> LoadNugetVulnerabilityDataAsync(NugetSourceClient nugetSourceClient, string vulnerabilityUri)
		{
			bool completed = false;
			if(_memoryCache != null)
			{
				try
				{
					if (!_memoryCache.TryGetValue(cacheName, out _vulnData))
					{
						try
						{
							_vulnData = await nugetSourceClient.GetNugetSourceData(vulnerabilityUri);
						}
						catch (Exception ex)
						{
							ApplicationException appEx = new ApplicationException("An error occurred on Vulnerability load.", ex);
							throw appEx;
						}

						if (_vulnData == null || !_vulnData.Any())
						{
							Exception ex = new Exception("The vulnerability data returned from Nuget was missing.");
							throw ex;
						}
						else
						{
							var cacheEntryOptions = new MemoryCacheEntryOptions().SetSlidingExpiration(TimeSpan.FromMinutes(20));
							_memoryCache.Set(cacheName, _vulnData, cacheEntryOptions);
						}
					}
					completed = true;
				}
				catch (Exception ex)
				{
					ApplicationException appEx = new ApplicationException("An error occurred while retrieving and storing the vulnerability data.", ex);
					throw appEx;
				}
			}
			else
			{
				ApplicationException appEx = new ApplicationException("The cache was not available for vulnerability storage.");
				throw appEx;
			}
			return completed;
		}

		public NugetAssembly? GetVulnerabilities(AssemblyData requestedAssembly)
		{
			if (_vulnData != null && _vulnData.ContainsKey(requestedAssembly.Name))
			{
				NugetAssembly matchedAssembly = new NugetAssembly(requestedAssembly.Name) { Vulnerabilities = new List<NugetVulnerability>(_vulnData[requestedAssembly.Name]) };
				matchedAssembly.SyncVulnerabilitiesToVersion(requestedAssembly.Version);
				return matchedAssembly;
			}
			else
			{
				return null;
			}
		}
	}
}
