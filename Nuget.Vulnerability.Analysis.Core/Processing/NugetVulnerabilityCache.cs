using Microsoft.Extensions.Caching.Memory;
using Microsoft.Extensions.Configuration;
using Nuget.Vulnerability.Analysis.Core.Inbound;
using System.Net;
using System.Net.Http.Json;

namespace Nuget.Vulnerability.Analysis.Core.Processing
{
	public class NugetVulnerabilityCache
	{
		private const string cacheName = "NugetData";
		private readonly IConfiguration _configuration;
		private readonly IMemoryCache _memoryCache;

		private Dictionary<string, List<NugetVulnerability>>? _vulnData;

		public NugetVulnerabilityCache(IConfiguration config, IMemoryCache memoryCache)
		{
			_configuration = config;
			_memoryCache = memoryCache;
			_vulnData = new Dictionary<string, List<NugetVulnerability>>();
		}

		public async Task<bool> LoadNugetVulnerabilityDataAsync()
		{
			bool completed = false;
			if(_memoryCache != null)
			{
				try
				{
					if (!_memoryCache.TryGetValue(cacheName, out _vulnData))
					{
						try
						{
							var client = new HttpClient();
							HttpResponseMessage baseVulnerabilities = await client.GetAsync(_configuration.GetSection("NugetResources:VulnerabilityBase").Value);
							if (baseVulnerabilities == null || !baseVulnerabilities.IsSuccessStatusCode || baseVulnerabilities.StatusCode.Equals(HttpStatusCode.NoContent))
							{
								throw new HttpRequestException("Unable to retrieve the Http data.");
							}
							_vulnData = await baseVulnerabilities.Content.ReadFromJsonAsync<Dictionary<string, List<NugetVulnerability>>?>();
							if(_vulnData == null)
							{
								_vulnData = new Dictionary<string, List<NugetVulnerability>>();
							}
						}
						catch (Exception ex)
						{
							ApplicationException appEx = new ApplicationException("An error occurred on Vulnerability load.", ex);
							throw appEx;
						}

						var cacheEntryOptions = new MemoryCacheEntryOptions().SetSlidingExpiration(TimeSpan.FromMinutes(20));

						_memoryCache.Set(cacheName, _vulnData, cacheEntryOptions);
					}
					completed = true;
				}
				catch (Exception ex)
				{
					ApplicationException appEx = new ApplicationException("An error occurred while retrieving and storing the vulnerability data.", ex);
					throw appEx;
				}
			}
			else
			{
				ApplicationException appEx = new ApplicationException("The cache was not available for vulnerability storage.");
				throw appEx;
			}
			return completed;
		}

		public NugetAssembly? GetVulnerabilities(AssemblyData requestedAssembly)
		{
			if (_vulnData != null && _vulnData.ContainsKey(requestedAssembly.Name))
			{
				NugetAssembly matchedAssembly = new NugetAssembly(requestedAssembly.Name) { Vulnerabilities = new List<NugetVulnerability>(_vulnData[requestedAssembly.Name]) };
				matchedAssembly.SyncVulnerabilitiesToVersion(requestedAssembly.Version);
				return matchedAssembly;
			}
			else
			{
				return null;
			}
		}
	}
}
