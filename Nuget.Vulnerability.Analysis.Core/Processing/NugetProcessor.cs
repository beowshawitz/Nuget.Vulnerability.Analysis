using Microsoft.Extensions.Caching.Memory;
using Microsoft.Extensions.Configuration;
using Nuget.Vulnerability.Analysis.Core.Inbound;
using Nuget.Vulnerability.Analysis.Core.Outbound;

namespace Nuget.Vulnerability.Analysis.Core.Processing
{
	public class NugetProcessor
	{
		private readonly NugetVulnerabilityCache _nugetVulnerabilityCache;

		public NugetProcessor(IConfiguration configuration, IMemoryCache memoryCache)
		{
			_nugetVulnerabilityCache = new NugetVulnerabilityCache(configuration, memoryCache);
		}

		public async Task<AnalysisResult> AnalyzeAsync(AnalysisRequest request)
		{
			AnalysisResult result = new AnalysisResult();
			if(await LoadAssemblyDataAsync())
			{
				ProcessRequest(request, result);
			}

			return result;
		}

		private async Task<bool> LoadAssemblyDataAsync()
		{
			try
			{
				return await _nugetVulnerabilityCache.LoadNugetVulnerabilityDataAsync();
			}
			catch (Exception ex) 
			{
				ApplicationException appEx = new ApplicationException("Unable to retrieve the vulnerability data from Nuget.", ex);
				throw appEx;
			}
		}

		private void ProcessRequest(AnalysisRequest request, AnalysisResult result)
		{
			result.VulnerableAssemblies = new List<NugetAssembly>();
			foreach (AssemblyData d in request.Assemblies)
			{
				var assembly = _nugetVulnerabilityCache.GetVulnerabilities(d);
				if(assembly != null && assembly.HasVulnerabilities)
				{
					result.AddUpdateAssembly(assembly);
				}
			}
		}
	}
}
