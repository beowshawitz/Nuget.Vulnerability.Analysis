using System;

namespace Nuget.Vulnerability.Analysis.Core.Processing
{
	public class NugetAssembly
	{
		public string Name { get; set; } = string.Empty;
		public List<NugetVulnerability>? Vulnerabilities { get; set; }

		public bool HasVulnerabilities
		{
			get
			{
				return (Vulnerabilities != null && Vulnerabilities.Count > 0);
			}
		}

		public NugetAssembly()
		{
			Vulnerabilities = new List<NugetVulnerability>();
		}

		public NugetAssembly(string name)
		{
			Name = name;
			Vulnerabilities = new List<NugetVulnerability>();
		}

		public void AddUpdateVulnerability(NugetVulnerability vuln) 
		{ 
			if(vuln != null && Vulnerabilities != null && !Vulnerabilities.Exists(x=>x.Url.Equals(vuln.Url, StringComparison.InvariantCultureIgnoreCase) && 
												x.Versions.Equals(vuln.Versions, StringComparison.InvariantCultureIgnoreCase) && x.Severity.Equals(vuln.Severity)))
			{ 
				Vulnerabilities.Add(vuln);
			}
		}

		/// <summary>
		///  Removes the vulnerabilities from the list returned, except if the version is missing or a zero.
		/// </summary>
		/// <param name="version">A</param>
		public void SyncVulnerabilitiesToVersion(string version)
		{
			if(!string.IsNullOrEmpty(version) && Vulnerabilities != null)
			{
				Vulnerabilities.RemoveAll(x => !x.WithinRange(version));
			}
		}
	}
}
