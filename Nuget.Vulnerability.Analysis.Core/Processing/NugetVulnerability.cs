using System;
using System.Text.Json.Serialization;
using System.Text.RegularExpressions;

namespace Nuget.Vulnerability.Analysis.Core.Processing
{
	public class NugetVulnerability
	{
		[JsonPropertyName("url")]
		public string Url { get; set; } = string.Empty;
		[JsonPropertyName("severity")]
		public int Severity { get; set; } = 0;
		[JsonPropertyName("versions")]
		public string Versions { get; set; } = string.Empty;

		private Version? _minRange { get; set; }
		private Version? _maxRange { get; set; }


		public NugetVulnerability() 
		{
			ParseVersions();
		}

		[JsonConstructor]
		public NugetVulnerability(string url, int severity, string versions)
		{
			Url = url;
			Severity = severity;
			Versions = versions;
			ParseVersions();
		}

		private void ParseVersions()
		{
			if (!string.IsNullOrEmpty(Versions))
			{
				Regex versionMatcher = new Regex(@"^[\[\(](?<min>\d{1,3}\.\d{1,3}(?:\.\d{1,6})?)?,\s+(?<max>\d{1,3}\.\d{1,3}(?:\.\d{1,6})?)?[\]\)]$", RegexOptions.Compiled);
				if(versionMatcher.IsMatch(Versions))
				{
					Match m = versionMatcher.Match(Versions);
					if (m.Groups.ContainsKey("min") && !string.IsNullOrEmpty(m.Groups["min"].Value))
					{
						_minRange = new Version(m.Groups["min"].Value);
					}
					else
					{
						_minRange = null;
					}
					if (m.Groups.ContainsKey("max") && !string.IsNullOrEmpty(m.Groups["max"].Value))
					{
						_maxRange = new Version(m.Groups["max"].Value);
					}
					else
					{
						_maxRange = null;
					}
				}
			}
		}

		public bool WithinRange(string version)
		{
			bool inRange = false;
			Version versionToCompare = new Version(version);
			//Using a version range like this, [Version,Version], make sure the version is within those ranges.
			if (_minRange != null && _maxRange != null)
			{
				var minCompare = versionToCompare.CompareTo(_minRange);
				var maxCompare = versionToCompare.CompareTo(_maxRange);
				if(minCompare >= 0 && maxCompare <= 0)
				{
					inRange = true;
				}
			}
			//Using a version range like this, [,Version], make sure the version less than or equal to the max version.
			if (_minRange == null && _maxRange != null)
			{
				var maxCompare = versionToCompare.CompareTo(_maxRange);
				if (maxCompare <= 0)
				{
					inRange = true;
				}
			}
			//Using a version range like this, [Version,], make sure the version greater than or equal to the min version.
			if (_minRange != null && _maxRange == null) 
			{
				var minCompare = versionToCompare.CompareTo(_minRange);
				if (minCompare >= 0)
				{
					inRange = true;
				}
			}
				
			return inRange;
		}
	}
}
