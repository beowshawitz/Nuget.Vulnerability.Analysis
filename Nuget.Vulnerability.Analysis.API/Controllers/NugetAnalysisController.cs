using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Memory;
using Microsoft.Extensions.Configuration;
using Newtonsoft.Json;
using Nuget.Vulnerability.Analysis.Core.Inbound;
using Nuget.Vulnerability.Analysis.Core.Outbound;
using Nuget.Vulnerability.Analysis.Core.Processing;
using System.Net;

namespace Nuget.Vulnerability.Analysis.API.Controllers
{
	[ApiController]
	[Route("api/[controller]")]
	public class NugetAnalysisController : ControllerBase
	{
		private readonly ILogger<NugetAnalysisController> _logger;
		private readonly IConfiguration _configuration;
		private readonly IMemoryCache _memoryCache;

		public NugetAnalysisController(ILogger<NugetAnalysisController> logger, IMemoryCache memoryCache, IConfiguration configuration)
		{
			_logger = logger;
			_memoryCache = memoryCache;
			_configuration = configuration;
		}

		[HttpPost]
		public async Task<ActionResult<AnalysisResult>> Post(AnalysisRequest request)
		{
			if (request != null)
			{
				try
				{
					NugetProcessor processor = new NugetProcessor(_configuration, _memoryCache);
					AnalysisResult result = await processor.AnalyzeAsync(request);
					if (result != null)
					{
						return new OkObjectResult(result);
					}
					else
					{
						return new OkObjectResult(new EmptyResult());
					}
				}
				catch (Exception ex)
				{
					_logger.LogError(ex, "An error occurred while executing the analysis on the request.");
					return StatusCode(StatusCodes.Status500InternalServerError, ex);
				}
			}
			else
			{
				return NoContent();
			}
		}
	}
}