
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Memory;
using Nuget.Vulnerability.Analysis.API.Filters;
using Nuget.Vulnerability.Analysis.Core.Clients;
using Nuget.Vulnerability.Analysis.Core.Inbound;
using Nuget.Vulnerability.Analysis.Core.Outbound;
using Nuget.Vulnerability.Analysis.Core.Processing;

namespace Nuget.Vulnerability.Analysis.API.Routers;

public class NugetAnalysisRouter : RouterBase
{
	private readonly IConfiguration _configuration;
	private readonly IMemoryCache _memoryCache;
	private readonly NugetSourceClient _nugetSourceClient;

	public NugetAnalysisRouter(ILogger<NugetAnalysisRouter> logger, IMemoryCache memoryCache, IConfiguration configuration, NugetSourceClient nugetSourceClient)
	{
		UrlFragment = "api/NugetAnalysis";
		Logger = logger;
		_memoryCache = memoryCache;
		_configuration = configuration;
		_nugetSourceClient = nugetSourceClient;
	}

	public override void AddRoutes(WebApplication app)
	{
		app.MapPost($"/{UrlFragment}", AnalyzeAsync).AddEndpointFilter<ValidatorFilter<AnalysisRequest>>();
	}

	protected virtual async Task<IResult> AnalyzeAsync(AnalysisRequest request)
	{
		try
		{
			NugetProcessor processor = new NugetProcessor(_configuration, _memoryCache);
			AnalysisResult result = await processor.AnalyzeAsync(request, _nugetSourceClient);
			if (result != null)
			{
				return Results.Ok(result);
			}
			return Results.Ok(new EmptyResult());
		}
		catch (Exception ex)
		{
			Logger?.LogError(ex, "An error occurred while executing the analysis on the request.");
			return Results.Problem(ex.Message);
		}
	}
}
