using FluentValidation;
using Nuget.Vulnerability.Analysis.API;
using Nuget.Vulnerability.Analysis.API.Routers;
using Nuget.Vulnerability.Analysis.Core.Clients;
using System.Net.Mime;

var builder = WebApplication.CreateBuilder(args);

// Add Logging
builder.Logging.ClearProviders();
builder.Logging.AddConsole();

// Add services to the container.
builder.Services.AddAuthorization();

builder.Services.AddHttpClient<NugetSourceClient>()
.ConfigurePrimaryHttpMessageHandler(() =>
{
	return new SocketsHttpHandler
	{
		PooledConnectionLifetime = TimeSpan.FromMinutes(5)
	};
})
.SetHandlerLifetime(Timeout.InfiniteTimeSpan);
//NugetRetrieverBgService - Preloads the Nuget file into memory
builder.Services.AddHostedService<NugetRetrieverBgService>();


// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

builder.Services.AddMemoryCache();

builder.Services.AddValidatorsFromAssemblyContaining<Program>();

// Add "Router" classes as a service
builder.Services.AddScoped<RouterBase, NugetAnalysisRouter>();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
	app.UseSwagger();
	app.UseSwaggerUI();
}

app.UseHttpsRedirection();

app.UseAuthorization();

//*************************************
// Add Routes from all "Router Classes"
//*************************************
using (var scope = app.Services.CreateScope())
{
	// Build collection of all RouterBase classes
	var services = scope.ServiceProvider.GetServices<RouterBase>();

	// Loop through each RouterBase class
	foreach (var item in services)
	{
		// Invoke the AddRoutes() method to add the routes
		item.AddRoutes(app);
	}

	// Make sure this is called within the application scope
	app.Run();
}
